*HowMuch.txt* A vim calculator for visual selections 
*HowMuch* *howmuch*

==============================================================================
>
	    __  __              __  ___           __       ___ 
	   / / / /___ _      __/  |/  /_  _______/ /_     /__ \
	  / /_/ / __ \ | /| / / /|_/ / / / / ___/ __ \     / _/
	 / __  / /_/ / |/ |/ / /  / / /_/ / /__/ / / /    /_/  
	/_/ /_/\____/|__/|__/_/  /_/\__,_/\___/_/ /_/    (_) 
	
	  - A Vim calculator for visual selections

==============================================================================

Author:  Kai Yuan (kent.yuan at gmail dot com)

This plugin was written and tested under Vim 7.4.

==============================================================================
CONTENTS                                                    *HowMuch-contents*

    1. Intro ............................................. |HowMuch-intro| 
    2. Features .......................................... |HowMuch-features| 
			2.1 Some examples .................................. |HowMuch-examples|
		3. Configuration ..................................... |HowMuch-config|
			3.1 Options ........................................ |HowMuch-options| 
			3.2 Mappings ....................................... |HowMuch-mappings| 
    4. Engines ........................................... |HowMuch-engines| 
			4.1 Auto Calculation ............................... |HowMuch-auto-calc|
			4.2 Add/modify engines ............................. |HowMuch-add-engine|
    5. Change Log ........................................ |HowMuch-changelog|

==============================================================================
INTRO                                                          *HowMuch-intro*

HowMuch calculates visual selected mathematical formulars, and writes
the result into buffer. Supports different output format. 

For more detailed information please check next section: |HowMuch-features|.

==============================================================================
FEATURES                                                    *HowMuch-features*

    - Supports all visual selection modes (char-/line-/block-wise)
    - Two output formats:
      > append result with/out ` = ` after the expression
      > replace the selected expressions with result

    - sum result in line |V| and block-wise |CTRL-V| selection
    - Mapping customization
    - Supports evaluation with explicit |engine| or |auto-calc|
    - Supports three evaluation "|engines|" (python, bc, vim)
		- You can still add your own engines or modify current engine

-------------------------------------------------------------------------------
Some examples~
  																														*HowMuch-examples*

===============================================================================
CONFIGURATION																									 *HowMuch-config*

HowMuch has pre-defined configuration as default. User could just install and
use. If you want to do customization, please read this section. 

-------------------------------------------------------------------------------
OPTIONS																												*HowMuch-options*

	|g:loaded_HowMuch| .................. if load HowMuch plugin
	|g:HowMuch_scale| ................... set scale of float result
	|g:HowMuch_auto_engines| ............ engine list for |auto-calc|
	|g:HowMuch_debug| ................... if turn on debug mode
	|g:HowMuch_engine_map| .............. (advanced option) availabe engines map 


-------------------------------------------------------------------------------
Detailed descriptions~

																															*g:loaded_HowMuch*
Use this option to disable HowMuch plugin: >
	let g:loaded_HowMuch = 1
<
																															*g:HowMuch_scale*
Use this option to define the precision of float calculations default value is
`2` : >
	let g:HowMuch_scale = 2
<
																												*g:HowMuch_auto_engines*
This option defines which engines would be used for |auto-calc|, also defines
the order of engines to be applied. See |auto-calc| too. The value of this
option is |List| default value is: >
	let g:HowMuch_auto_engines = ['bc', 'vim', 'py']
<
 																															*g:HowMuch_debug*
Use this option to show more debug message. Debug information by default is
disabled. >
	let g:HowMuch_debug = 0
>
  																												*g:HowMuch_engine_map*
The value of this option is a vim |Dictionary|. The key is an engine name. The
value is a function to do expression evaluation. Usually this option should
not be changed. However the modification possibility was provided, because you
may want to write your own "engine". Then you need change this option. See
|HowMuch-add-engine|

===============================================================================
MAPPINGS                                       **HowMuch-mappings*



===============================================================================
ENGINES                                       *engine* *engines* *HowMuch-engines*
Engines in HowMuch are expression evaluators. HowMuch supports three engines:
|py-engine|, |bc-engine| and |vim-engine|. 

																																	*vim-engine*
with vim-engine, the selected expressions will be evaluated as vim expression. 

																																	*bc-engine*
bc-engine will evaluate expression as GNU bc expression. The expressions will
be passed to "bc -l" to do calculation. Check bc man page for detailed
information about `-l` option.

If invalid bc expression was passed in, or system has no bc installed.  The
engine will return "Err".

Note  expressions like `foo` are valid bc expression. If we evaluate it with
bc-engine, the result would be `0`

																																	*py-engine*
py-engine will evaluate expressions in python2. If system has no python2
installed, "Err" will be returned. py-engine uses python's `eval()` to
evaluate expressions. To avoid harmful expressions get evaluated, only
the `math` module is in namespace.

-------------------------------------------------------------------------------
Auto-Calculation:~
																				*autoCalc* *auto-calc* *HowMuch-auto-calc*
HowMuch provides a feature called auto calculation. It will pick user defined
(or default if user didn't specify ) engines in turn to evluate expressions.
The global variable `g:HowMuch_auto_engines` (see |HowMuch_auto_engines|) defines
the engines used by auto-calc and the order of the engines. Once an engine
gives non-error result, HowMuch will use that result and stop further
evaluation. If all engines gave `Err`, the result of evaluation would be `Err`

This is useful for such cases that user selected multiple
expressions but they are not all valid expressions for a single engine. For
example: >

	valid for all supported engines : 100+200                           
	vim only expression             : pow(2.0, 2.0) + abs(-5) 
	bc only expression              : s(45)
	python only expression          : sin(45)                           
<
If we block-wise select the expressions press `<leader>?` (default mapping,
		check |HowMuch-mappings| for detail) and  use default
`g:HowMuch_auto_engines` (['bc', 'vim', 'py']), and default scale (2) do an
auto-calc, the output would be: >

	valid for all supported engines : 100+200                 300
	vim only expression             : pow(2.0, 2.0) + abs(-5) 9 
	bc only expression              : s(45)                   .85
	python only expression          : sin(45)                 0.85 
<
Note |auto-calc| is convenient, but you should use with caution. If same
operator is valid in different engines but has different meanings, the result
could be unexpected. For example, `3^2` in bc, means the square of of `3`, the
result is `9`. But the same expression in python means `3 XOR 2`, the result
is `1`. In python, the square expression would be `3**2`. If in the
`g:HowMuch_auto_engines` py was defined before bc, 1 would be returned. 

-------------------------------------------------------------------------------
Add/modify engines~
															*add-engines* *modify-engine* *HowMuch-add-engine*

===============================================================================
 vim:tw=78:ts=2:sw=2:sts=2:ft=help:norl:
